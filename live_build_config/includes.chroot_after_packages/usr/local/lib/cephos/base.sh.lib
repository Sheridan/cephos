#!/usr/bin/env bash

clr_reset="\e[0m"
clr_info="\e[1;32m"
clr_warn="\e[1;33m"
clr_err="\e[1;31m"
clr_verb="\e[1;36m"
verbose=0
use_logfile=1
build_hostname="cephos"

function log_file()
{
  local log_level="$1"
  local log_text="$2"
  if (( use_logfile ))
  then
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] [$(basename "${0}")] [${log_level}] ${log_text}" | sudo tee -a /var/log/cephos.log &>/dev/null
  fi
}

function log_message()
{
  local log_level="$1"
  local log_color="$2"
  local log_text="$3"

  echo -e "[${log_color}${log_level}${clr_reset}] ${log_text}"

  log_file "${log_level}" "${log_text}"
}

function log_verbose()
{
  local message="$1"
  if (( verbose ))
  then
    log_message "V" "${clr_verb}" "${message}"
  else
    log_file "v" "${message}"
  fi
}

function log_info()
{
  local message="$1"
  log_message "I" "${clr_info}" "${message}"
}

function log_wrn()
{
  local message="$1"
  log_message "W" "${clr_warn}" "${message}"
}

function log_err()
{
  local message="$1"
  log_message "E" "${clr_err}" "${message}"
  beep_err
}

function log_delimiter()
{
  log_message "=" "${clr_verb}"  "--------==|==--------"
}

function wrong_opt()
{
  local message="$1"
  log_err "${message}"
  usage
  exit 1
}

function log_cry()
{
  local message="$1"
  log_err "${message}"
  exit 1
}

function verbose_flag()
{
  if (( verbose ))
  then
    echo "-v"
  else
    echo " "
  fi
}

function beep_err()
{
  beep -f 1000 -l 80 -d 50 -n -f 700 -l 100 -d 40 -n -f 500 -l 250
}

function beep_done()
{
  beep -f 600 -l 150 -d 100 -n -f 800 -l 150 -d 100 -n -f 1000 -l 250
}

function beep_ask()
{
  beep -f 1000 -l 150 -d 10000 -n -f 1000 -l 150 -d 10000 -n -f 2000 -l 150
}

function usage()
{
  echo "${help_text}"
  echo "$@"
  echo
  echo -n "CephOS version: "
  cat /etc/cephos_version
  exit 0
}

function ask_confirmation()
{
  local prompt_message=$1
  local user_input

  beep_ask
  while true
  do
    echo -ne "[${clr_warn}?${clr_reset}] "
    read -r -p "${prompt_message} (y/n): " user_input
    case "${user_input}" in
      [Yy]) return 0 ;;
      [Nn]) exit 1   ;;
         *) log_wrn "Please enter 'y' or 'n'. Try again." ;;
    esac
  done
}

function check_user()
{
  local target_user="$1"
  if [[ "$(id -un)" != "${target_user}" ]]
  then
    log_err "Must be run as user ${target_user}"
    exit 1
  fi
}

function manage_systemd_unit_state()
{
  local state="$1"
  local unit="$2"
  log_verbose "Change '${unit}' state to '${state}'"
  sudo systemctl ${state} ${unit}
}

function systemd_service_enabled()
{
  local service="$1"
  local state
  state=$(systemctl is-enabled "${service}.service" 2>/dev/null)
  [[ "${state}" == "enabled" ]]
}

function systemd_service_started()
{
  local service="$1"
  local state
  state=$(systemctl is-active "${service}.service" 2>/dev/null)
  [[ "${state}" == "active" ]]
}

function manage_systemd_service_state()
{
  local state="$1"
  local service="$2"
  log_verbose "Change service '${service}' state to '${state}'"

  case "${state}" in
    enable)
      if systemd_service_enabled "${service}"
      then
        if systemd_service_started "${service}"
        then
          log_verbose "Service '${service}' already enabled and running — restarting"
          sudo systemctl restart "${service}.service"
        else
          log_verbose "Service '${service}' enabled but not running — starting"
          sudo systemctl start "${service}.service"
        fi
      else
        log_verbose "Enabling and starting '${service}'"
        sudo systemctl enable --now "${service}.service"
      fi
    ;;
    disable)
      if systemd_service_enabled "${service}"
      then
        if systemd_service_started "${service}"
        then
          log_verbose "Service '${service}' enabled and running — stopping before disable"
          sudo systemctl stop "${service}.service"
        fi
        log_verbose "Disabling '${service}'"
        sudo systemctl disable "${service}.service"
      else
        if systemd_service_started "${service}"
        then
          log_verbose "Service '${service}' disabled but still running — stopping"
          sudo systemctl stop "${service}.service"
        else
          log_verbose "Service '${service}' already disabled and inactive — nothing to do"
        fi
      fi
    ;;
  esac
}

function is_float()
{
  local value="$1"
  [[ "$value" =~ ^-?[0-9]+([.][0-9]+)?$ ]]
}

function is_integer()
{
  local value="$1"
  [[ "$value" =~ ^-?[0-9]+$ ]]
}


function gen_random_password()
{
  local length="$1"
  tr -dc A-Za-z0-9 </dev/urandom | head -c ${length}
}

function to_safe_string()
{
    local input_string="$1"
    local safe_string

    safe_string="${input_string//[^a-zA-Z0-9]/_}"

    printf '%s\n' "$safe_string"
}

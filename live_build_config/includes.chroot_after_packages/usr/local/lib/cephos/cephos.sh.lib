#!/usr/bin/env bash

function check_hostname()
{
  if [[ "$0" == "/usr/local/bin/cephos-init-host" ]]
  then
    return 0
  fi
  if [[ "$(hostname -s)" == "${build_hostname}" ]]
  then
    log_err "Change hostname please"
    exit 1
  fi
}

function set_recursive_permissions()
{
  local target_directory="$1"

  log_verbose "Setting permissions for ${target_directory}"
  sudo chown -R ceph:ceph "${target_directory}"
  sudo find "${target_directory}" -type d -exec chmod 750 {} \;
  sudo find "${target_directory}" -type f -exec chmod 640 {} \;
}

function set_fs_permissions()
{
  log_verbose "Setting permissions"
  set_recursive_permissions "${ceph_conf_dir}"
  set_recursive_permissions "${ceph_data_dir}"
}

function ceph_crash_up()
{
  sudo mkdir -p "${ceph_data_dir}/crash/posted"
  set_fs_permissions
  manage_service_state "enable" "ceph-crash"
}

function create_directories()
{
  log_verbose "Creating directories"
  sudo mkdir -p ${ceph_conf_dir}
  sudo mkdir -p ${ceph_data_dir}/bootstrap-mon \
                ${ceph_data_dir}/bootstrap-mds \
                ${ceph_data_dir}/bootstrap-mgr \
                ${ceph_data_dir}/bootstrap-osd \
                ${ceph_data_dir}/bootstrap-rgw

  ensure_symlink_correct "${ceph_conf_dir}" "/etc/ceph"
  ensure_symlink_correct "${ceph_data_dir}" "/var/lib/ceph"

  set_fs_permissions
}

function dashboard_user_exists()
{
  local user="$1"
  ${sudo_ceph} ceph dashboard ac-user-show "$user" &>/dev/null
}

function get_ceph_hosts()
{
  ceph osd metadata -f json \
  | jq -r '.[] | {host: .hostname, front: .front_addr, back: .back_addr}
            | [.host, (.front | capture("v2:(?<ip>[^:]+)") .ip // "-"),
                      (.back  | capture("v2:(?<ip>[^:]+)") .ip // "-")]
            | @tsv' \
  | sort -u
}

function get_cluster_health_status()
{
  ${sudo_ceph} ceph -s -f json | jq -r '.health.status'
}

function wait_for_cluster_health_ok()
{
  local current_status
  log_info "Waiting for HEALTH_OK..."

  while true
  do
    current_status="$(get_cluster_health_status)"
    log_info "[$(date '+%H:%M:%S')] Health status: ${current_status}"

    if [[ "${current_status}" == "HEALTH_OK" ]]
    then
      log_info "HEALTH_OK reached"
      return 0
    fi

    sleep 2
  done
}

function disk_already_in_ceph()
{
  local device="$1"
  local realdev
  realdev=$(realpath "$device" 2>/dev/null)

  local osd_id
  osd_id=$(${sudo_ceph} ceph-volume lvm list "$realdev" 2>/dev/null | awk '/osd id/ {print $3}' | head -n1)

  [[ -z "$osd_id" ]] && return 1

  local osd_path="/var/lib/ceph/osd/ceph-${osd_id}"
  if [[ ! -d "$osd_path" ]]
  then
    return 1
  fi

  local osd_device
  osd_device=$(${sudo_ceph} ceph-volume lvm list ${osd_id} | awk '/devices/ {print $2}'  )

  local osd_realdev
  osd_realdev=$(realpath "$osd_device" 2>/dev/null)

  if [[ "$realdev" == "$osd_realdev" ]]; then
    return 0
  else
    return 1
  fi
}


function prepare_ceph_data()
{
  log_verbose "Preparing data"
  check_hostname
  cephos_root="/cephos"
  cephos_conf="${cephos_root}/cephos"

  ceph_root="${cephos_root}/ceph"
  ceph_conf_dir="${ceph_root}/conf"
  ceph_data_dir="${ceph_root}/data"
  ceph_main_conf="${ceph_conf_dir}/ceph.conf"
  ceph_fsid=$(get_cluster_environment "fsid" "none")

  cephfs_name="storage"
  mon_id="$(hostname -s)"
  mgr_id="$(hostname -s)"
  mds_id="$(hostname -s)"
  mon_data_dir="${ceph_data_dir}/mon/ceph-${mon_id}"
  mgr_data_dir="${ceph_data_dir}/mgr/ceph-${mgr_id}"
  mds_data_dir="${ceph_data_dir}/mds/ceph-${mds_id}"
  osd_data_dir="${ceph_data_dir}/osd"

  public_network=$(get_cluster_environment "public_network" "10.0.0.0/8")
  cluster_network=$(get_cluster_environment "cluster_network" "10.0.0.0/8")
  public_ip=$(get_node_environment "public_ip" "10.0.0.100")
  cluster_ip=$(get_node_environment "cluster_ip" "10.0.0.101")

  export CLUSTER=ceph
  export CEPH_CLUSTER=ceph
  export CEPH_CONF="${ceph_main_conf}"

  sudo_ceph="sudo --preserve-env"

  # log_info "Main conf file: ${ceph_main_conf}"
  log_info "Ceph fsid: ${ceph_fsid}"
  log_info "Ceph id: [mon:${mon_id}], [mgr:${mgr_id}], [mds:${mds_id}]"
}

prepare_ceph_data

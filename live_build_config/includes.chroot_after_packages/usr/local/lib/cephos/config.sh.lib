#!/usr/bin/env bash

# ---=---
function write_to_ini()
{
  local inifile="$1"
  local section="$2"
  local variable="$3"
  local value="$4"
  local options="$5"

  sudo mkdir -p "$(dirname $inifile)"

  log_verbose "Write '${value}' to '${section}.${variable}' in ${inifile}"
  sudo crudini --set ${options} "${inifile}" "${section}" "${variable}" "${value}"

  if (( $? ))
  then
    log_cry "Can not write to ${inifile}"
  fi
}

function read_from_ini()
{
  local inifile="$1"
  local section="$2"
  local variable="$3"
  local default="$4"
  local value

  log_verbose "Read '${section}.${variable}' with default '${default}' to ${inifile}"
  value=$(sudo crudini --get "${inifile}" "${section}" "${variable}" 2>/dev/null)

  if [[ -n "${value}" ]]
  then
    echo "${value}"
  else
    echo "${default}"
  fi
}

function del_from_ini()
{
  local inifile="$1"
  local section="$2"
  local variable="$3"

  log_verbose "Delete '${section}.${variable}' from ${inifile}"
  sudo crudini --del "${inifile}" "${section}" "${variable}"
}

function read_list_from_ini()
{
  local inifile="$1"
  local section="$2"
  local variable="$3"
  local default="$4"
  local raw
  local arr
  raw=$(read_from_ini "${inifile}" "${section}" "${variable}" "${default}")
  raw=$(echo "$raw" | sed 's/, */,/g')
  IFS=',' read -r -a arr <<< "$raw"
  echo "${arr[@]}"
}

function del_list_item_from_ini()
{
  local inifile="$1"
  local section="$2"
  local variable="$3"
  local item_to_delete="$4"
  local current_list
  local filtered_list=()
  local element
  local new_value

  current_list=$(read_list_from_ini "${inifile}" "${section}" "${variable}" "")

  for element in ${current_list}
  do
    if [[ "${element}" != "${item_to_delete}" ]]
    then
      filtered_list+=("${element}")
    fi
  done

  if [[ "${#filtered_list[@]}" -eq 0 ]]
  then
    log_verbose "Removing key '${section}.${variable}' entirely from ${inifile} (deleted '${item_to_delete}')"
    del_from_ini "${inifile}" "${section}" "${variable}"
  else
    new_value=$(IFS=','; echo "${filtered_list[*]}")
    log_verbose "Updating '${section}.${variable}' in ${inifile}, removing '${item_to_delete}'"
    write_to_ini "${inifile}" "${section}" "${variable}" "${new_value}" "--list"
  fi
}

# ---=---
function set_environment()
{
  local variable="$1"
  local value="$2"
  local kind="$3"
  write_to_ini "${cephos_data_dir}/${kind}.ini" "${kind}" "${variable}" "${value}" ""
}

function get_environment()
{
  local variable="$1"
  local default="$2"
  local kind="$3"
  read_from_ini "${cephos_data_dir}/${kind}.ini" "${kind}" "${variable}" "${default}"
}
# ---=---
function set_cluster_environment()
{
  local variable="$1"
  local value="$2"
  set_environment "${variable}" "${value}" "cluster"
}

function get_cluster_environment()
{
  local variable="$1"
  local default="$2"
  get_environment "${variable}" "${default}" "cluster"
}
# ---=---
function set_node_environment()
{
  local variable="$1"
  local value="$2"
  set_environment "${variable}" "${value}" "node"
}

function get_node_environment()
{
  local variable="$1"
  local default="$2"
  get_environment "${variable}" "${default}" "node"
}
# ---=---
function ceph_conf_get()
{
  local section="$1"
  local variable="$2"
  read_from_ini "${ceph_main_conf}" "${section}" "${variable}" "none"
}

# Set value to ceph.conf
function ceph_conf_set()
{
  local section="$1"
  local variable="$2"
  local value="$3"
  write_to_ini "${ceph_main_conf}" "${section}" "${variable}" "${value}" ""
}

# Set value to ceph distributed configuration
function ceph_config_set()
{
  local entity="$1"
  local key="$2"
  local value="$3"
  local force_flag="${4:-}"

  if [[ "$force_flag" == "force" ]] || ! ceph config dump | grep -qE "^[[:space:]]*$entity[[:space:]].*[[:space:]]$key[[:space:]]"
  then
    log_verbose "Applying to [$entity:$key] new value: $value"
    ceph config set "$entity" "$key" "$value"
  fi
}
# ---=---
function ceph_conf_get_list()
{
  local option="$1"
  read_list_from_ini "${ceph_main_conf}" "global" "${option}" ""
}

function ceph_conf_add_to_list()
{
  local option="$1"
  local value="$2"
  log_verbose "Adding ${value} to ${option}"
  write_to_ini "${ceph_main_conf}" "global" "${option}" "${value}" "--list"
}

function ceph_conf_del_from_list()
{
  local option="$1"
  local value="$2"
  log_verbose "Removing ${value} from ${option}"
  del_list_item_from_ini "${ceph_main_conf}" "global" "${option}" "${value}"
}

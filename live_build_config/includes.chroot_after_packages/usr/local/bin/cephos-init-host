#!/usr/bin/env bash

. /usr/local/lib/cephos/base.sh.lib
. /usr/local/lib/cephos/config.sh.lib
. /usr/local/lib/cephos/cephos.sh.lib
. /usr/local/lib/cephos/network.sh.lib

read -r -d '' help_text <<EOF
CephOS Host Initialization Script

Options:
-n <fqdn>             (Required) Specify the Fully Qualified Domain Name (FQDN) for the host
-P <public_network>   (Required) Specify the public network in CIDR notation (e.g., 10.10.0.0/24)
-C <cluster_network>  (Optional) Specify the cluster network in CIDR notation (e.g., 10.20.0.0/24)
                                 Default: public network
-p <public_ip>        (Required) Specify the public IP address for this host
-c <cluster_ip>       (Optional) Specify the cluster IP address for this host
                                 Default: public IP
-z <timezone>         (Optional) Specify the host timezone
                                 Default: Etc/UTC
-h                    Display this help message
-v                    Enable verbose output

Examples:
# Initialize host with FQDN
$0 -n ceph-first.domain.local -P 10.10.0.0/24 -C 10.20.0.0/24 -p 10.10.0.100 -c 10.20.0.100
EOF
set -euo pipefail

# --- options parse ---
fqdn=""
public_network=""
cluster_network=""
public_ip=""
cluster_ip=""
timezone=""
while getopts ":z:P:C:p:c:n:hv" opt
do
  case ${opt} in
    n) fqdn="${OPTARG}" ;;
    P) public_network="${OPTARG}" ;;
    C) cluster_network="${OPTARG}" ;;
    p) public_ip="${OPTARG}" ;;
    c) cluster_ip="${OPTARG}" ;;
    z) timezone="${OPTARG}" ;;
    h) usage; exit 0 ;;
    v) verbose=1 ;;
   \?) wrong_opt "Error: unknown option -${OPTARG}" ;;
    :) wrong_opt "Error: option -${OPTARG} requires an argument" ;;
  esac
done

if [[ -z "${fqdn}" ]]
then
  wrong_opt "Hostname (-n) is not set"
fi

if [[ "${fqdn}" != *.* ]]
then
  log_cry "Error: string '${fqdn}' is not a FQDN (missing domain part)"
fi

if [[ -z "${public_network}" ]]
then
  wrong_opt "Public network (-P) not specified"
fi

if [[ -z "${cluster_network}"  ]]
then
  cluster_network="${public_network}"
fi

if [[ -z "${public_ip}"  ]]
then
  wrong_opt "Public IP (-p) not specified"
fi

if [[ -z "${cluster_ip}"  ]]
then
  cluster_ip="${public_ip}"
fi
# --- options parse ---

# --- functions ---
function restart_shell()
{
  local current_shell executable_name
  current_shell=$(ps -p $$ -o comm=)
  executable_name=$(basename "${current_shell}")

  log_verbose "Reinitializing current shell: ${executable_name}"

  case "${executable_name}" in
    bash) source ~/.bashrc ;;
     zsh) source ~/.zshrc ;;
       *) log_cry "Unknown shell: ${executable_name}" ;;
  esac
}

function set_timezone()
{
  if [[ -n "${timezone}"  ]]
  then
    if [[ ! -f "/usr/share/zoneinfo/${timezone}" ]]
    then
      log_cry "Error: Timezone '${timezone}' not found under /usr/share/zoneinfo"
    fi
    log_info "Setting timezone to ${timezone} via timedatectl..."
    sudo timedatectl set-timezone "${timezone}"
  fi
}
# --- functions ---
# --- main ---
check_user "cephos"

log_info "Init host ${fqdn} for ceph with public [${public_ip} : ${public_network}] and cluster [${cluster_ip} : ${cluster_network}] networks"

set_timezone

set_cluster_environment "public_network" "${public_network}"
set_cluster_environment "cluster_network" "${cluster_network}"
set_node_environment "public_ip" "${public_ip}"
set_node_environment "cluster_ip" "${cluster_ip}"

_hostname="${fqdn%%.*}"
_domain="${fqdn#*.}"

make_hosts_record "${public_ip}" "${_hostname} ${fqdn}"
make_hosts_record "${cluster_ip}" "$(hostname -s)-cluster"

if [[ "$(hostname -s)" == "${build_hostname}" ]]
then
  log_info "Setting hostname to ${_hostname} and domain to ${_domain}"
  sudo sed -i.bak -E "s/[[:space:]]*\b${build_hostname}\b//g; s/[[:space:]]+/ /g" /etc/hosts
  sudo domainname "${_domain}"
  sudo hostnamectl hostname "${_hostname}"
  restart_shell
else
  log_info "Hostname already applied"
fi
